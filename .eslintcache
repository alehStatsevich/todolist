[{"D:\\react\\todolist-16\\src\\reportWebVitals.ts":"1","D:\\react\\todolist-16\\src\\features\\Login\\Login.tsx":"2","D:\\react\\todolist-16\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"3","D:\\react\\todolist-16\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"4","D:\\react\\todolist-16\\src\\app\\App.tsx":"5","D:\\react\\todolist-16\\src\\components\\EditableSpan\\EditableSpan.tsx":"6","D:\\react\\todolist-16\\src\\api\\todolists-api.ts":"7","D:\\react\\todolist-16\\src\\features\\Login\\authReducer.ts":"8","D:\\react\\todolist-16\\src\\features\\TodolistsList\\todolists-reducer.ts":"9","D:\\react\\todolist-16\\src\\features\\TodolistsList\\TodolistsList.tsx":"10","D:\\react\\todolist-16\\src\\app\\app-reducer.ts":"11","D:\\react\\todolist-16\\src\\index.tsx":"12","D:\\react\\todolist-16\\src\\features\\TodolistsList\\tasks-reducer.ts":"13","D:\\react\\todolist-16\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"14"},{"size":425,"mtime":1623929259149,"results":"15","hashOfConfig":"16"},{"size":4004,"mtime":1624004472119,"results":"17","hashOfConfig":"16"},{"size":4193,"mtime":1623929260526,"results":"18","hashOfConfig":"16"},{"size":1773,"mtime":1623929260652,"results":"19","hashOfConfig":"16"},{"size":2569,"mtime":1624010483799,"results":"20","hashOfConfig":"16"},{"size":952,"mtime":1623929259993,"results":"21","hashOfConfig":"16"},{"size":3075,"mtime":1624010483830,"results":"22","hashOfConfig":"16"},{"size":2050,"mtime":1624010483814,"results":"23","hashOfConfig":"16"},{"size":4851,"mtime":1625837101753,"results":"24","hashOfConfig":"16"},{"size":4128,"mtime":1625840362925,"results":"25","hashOfConfig":"16"},{"size":2162,"mtime":1624009247292,"results":"26","hashOfConfig":"16"},{"size":740,"mtime":1623933284357,"results":"27","hashOfConfig":"16"},{"size":5633,"mtime":1623929260229,"results":"28","hashOfConfig":"16"},{"size":1092,"mtime":1623929260091,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vwi65w",{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\react\\todolist-16\\src\\reportWebVitals.ts",[],"D:\\react\\todolist-16\\src\\features\\Login\\Login.tsx",["62"],"import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./authReducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch= useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType,boolean>((state)=>state.auth.isLoggedIn)\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Must be 3 characters or less';\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n    if (isLoggedIn){\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                            // onBlur={formik.handleBlur}\r\n                            // name=\"email\"\r\n                            // onChange={formik.handleChange}\r\n                            // value={formik.values.email}\r\n                        />\r\n                        {formik.touched.email ? <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                            // name=\"password\"\r\n                            // onChange={formik.handleChange}\r\n                            // onBlur={formik.handleBlur}\r\n                            // value={formik.values.password}\r\n                        />\r\n                        {formik.touched.password ? <div style={{color: \"red\"}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox name=\"rememberMe\"\r\n                                               onChange={formik.handleChange}\r\n                                               checked={formik.values.rememberMe}/>}\r\n\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n",["63","64"],"D:\\react\\todolist-16\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["65","66","67","68","69","70"],"D:\\react\\todolist-16\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["71","72","73"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","D:\\react\\todolist-16\\src\\app\\App.tsx",["74"],"D:\\react\\todolist-16\\src\\components\\EditableSpan\\EditableSpan.tsx",[],"D:\\react\\todolist-16\\src\\api\\todolists-api.ts",[],"D:\\react\\todolist-16\\src\\features\\Login\\authReducer.ts",["75"],"D:\\react\\todolist-16\\src\\features\\TodolistsList\\todolists-reducer.ts",["76"],"D:\\react\\todolist-16\\src\\features\\TodolistsList\\TodolistsList.tsx",["77","78","79","80","81","82","83","84"],"D:\\react\\todolist-16\\src\\app\\app-reducer.ts",[],"D:\\react\\todolist-16\\src\\index.tsx",[],"D:\\react\\todolist-16\\src\\features\\TodolistsList\\tasks-reducer.ts",["85","86"],"import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","D:\\react\\todolist-16\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],{"ruleId":"87","severity":1,"message":"88","line":56,"column":32,"nodeType":"89","endLine":56,"endColumn":49},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":35,"column":8,"nodeType":"96","endLine":35,"endColumn":10,"suggestions":"97"},{"ruleId":"94","severity":1,"message":"98","line":39,"column":8,"nodeType":"96","endLine":39,"endColumn":42,"suggestions":"99"},{"ruleId":"94","severity":1,"message":"98","line":46,"column":8,"nodeType":"96","endLine":46,"endColumn":54,"suggestions":"100"},{"ruleId":"94","severity":1,"message":"98","line":48,"column":95,"nodeType":"96","endLine":48,"endColumn":134,"suggestions":"101"},{"ruleId":"94","severity":1,"message":"98","line":49,"column":101,"nodeType":"96","endLine":49,"endColumn":140,"suggestions":"102"},{"ruleId":"94","severity":1,"message":"98","line":50,"column":107,"nodeType":"96","endLine":50,"endColumn":146,"suggestions":"103"},{"ruleId":"94","severity":1,"message":"98","line":15,"column":97,"nodeType":"96","endLine":15,"endColumn":130,"suggestions":"104"},{"ruleId":"94","severity":1,"message":"98","line":20,"column":8,"nodeType":"96","endLine":20,"endColumn":41,"suggestions":"105"},{"ruleId":"94","severity":1,"message":"98","line":24,"column":8,"nodeType":"96","endLine":24,"endColumn":41,"suggestions":"106"},{"ruleId":"94","severity":1,"message":"107","line":34,"column":7,"nodeType":"96","endLine":34,"endColumn":9,"suggestions":"108"},{"ruleId":"109","severity":1,"message":"110","line":5,"column":9,"nodeType":"111","messageId":"112","endLine":5,"endColumn":18},{"ruleId":"113","severity":1,"message":"114","line":10,"column":45,"nodeType":"115","messageId":"116","endLine":10,"endColumn":47},{"ruleId":"94","severity":1,"message":"117","line":37,"column":8,"nodeType":"96","endLine":37,"endColumn":10,"suggestions":"118"},{"ruleId":"94","severity":1,"message":"119","line":42,"column":8,"nodeType":"96","endLine":42,"endColumn":10,"suggestions":"120"},{"ruleId":"94","severity":1,"message":"119","line":47,"column":8,"nodeType":"96","endLine":47,"endColumn":10,"suggestions":"121"},{"ruleId":"94","severity":1,"message":"119","line":52,"column":8,"nodeType":"96","endLine":52,"endColumn":10,"suggestions":"122"},{"ruleId":"94","severity":1,"message":"119","line":57,"column":8,"nodeType":"96","endLine":57,"endColumn":10,"suggestions":"123"},{"ruleId":"94","severity":1,"message":"119","line":62,"column":8,"nodeType":"96","endLine":62,"endColumn":10,"suggestions":"124"},{"ruleId":"94","severity":1,"message":"119","line":67,"column":8,"nodeType":"96","endLine":67,"endColumn":10,"suggestions":"125"},{"ruleId":"94","severity":1,"message":"119","line":72,"column":8,"nodeType":"96","endLine":72,"endColumn":10,"suggestions":"126"},{"ruleId":"109","severity":1,"message":"127","line":5,"column":9,"nodeType":"111","messageId":"112","endLine":5,"endColumn":22},{"ruleId":"113","severity":1,"message":"114","line":13,"column":94,"nodeType":"115","messageId":"116","endLine":13,"endColumn":96},"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","no-native-reassign",["128"],"no-negated-in-lhs",["129"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'props.todolist.id'. Either include them or remove the dependency array.","ArrayExpression",["130"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["131"],["132"],["133"],["134"],["135"],["136"],["137"],["138"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["139"],"@typescript-eslint/no-unused-vars","'addTaskAC' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'isLoggedIn'. Either include them or remove the dependency array.",["140"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["141"],["142"],["143"],["144"],["145"],["146"],["147"],"'setAppErrorAC' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},{"desc":"150","fix":"152"},{"desc":"150","fix":"153"},{"desc":"150","fix":"154"},{"desc":"150","fix":"155"},{"desc":"150","fix":"156"},{"desc":"150","fix":"157"},{"desc":"150","fix":"158"},{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},{"desc":"159","fix":"163"},{"desc":"159","fix":"164"},{"desc":"159","fix":"165"},{"desc":"159","fix":"166"},{"desc":"159","fix":"167"},{"desc":"159","fix":"168"},{"desc":"159","fix":"169"},"Update the dependencies array to be: [demo, dispatch, props.todolist.id]",{"range":"170","text":"171"},"Update the dependencies array to be: [props]",{"range":"172","text":"173"},{"range":"174","text":"173"},{"range":"175","text":"173"},{"range":"176","text":"173"},{"range":"177","text":"173"},{"range":"178","text":"173"},{"range":"179","text":"173"},{"range":"180","text":"173"},"Update the dependencies array to be: [dispatch]",{"range":"181","text":"182"},"Update the dependencies array to be: [demo, dispatch, isLoggedIn]",{"range":"183","text":"184"},{"range":"185","text":"182"},{"range":"186","text":"182"},{"range":"187","text":"182"},{"range":"188","text":"182"},{"range":"189","text":"182"},{"range":"190","text":"182"},{"range":"191","text":"182"},[1464,1466],"[demo, dispatch, props.todolist.id]",[1581,1615],"[props]",[1846,1892],[1991,2030],[2133,2172],[2281,2320],[765,798],[1071,1104],[1261,1294],[1220,1222],"[dispatch]",[1390,1392],"[demo, dispatch, isLoggedIn]",[1561,1563],[1732,1734],[1937,1939],[2150,2152],[2351,2353],[2498,2500],[2677,2679]]